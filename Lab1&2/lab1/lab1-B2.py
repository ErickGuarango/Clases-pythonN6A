# Excepci√≥n personalizada
class CantidadInvalida(Exception):
    def __init__(self, mensaje="La cantidad debe ser mayor que cero."):
        super().__init__(mensaje)

# Funci√≥n principal
def calcular_total(precio_unitario, cantidad):
    if cantidad <= 0:
        raise CantidadInvalida()
    if precio_unitario < 0:
        raise ValueError("El precio unitario no puede ser negativo.")
    return precio_unitario * cantidad

# Funci√≥n que ejecuta y muestra todos los casos
def probar_casos():
    casos = [
        (10, 3),     # v√°lido
        (10, 0),     # cantidad inv√°lida
        (-5, 2),     # precio inv√°lido
        (15, -1),    # cantidad inv√°lida
        (0, 5),      # v√°lido (precio 0)
    ]

    print("üß™ Validando operaciones de compra...\n")

    for i, (precio, cantidad) in enumerate(casos):
        print(f"üîπ Caso {i+1}: precio_unitario={precio}, cantidad={cantidad}")
        try:
            total = calcular_total(precio, cantidad)
            print(f"   ‚úÖ Total calculado: ${total:.2f}\n")
        except CantidadInvalida as ci:
            print(f"   ‚ùå Error de cantidad: {ci}\n")
        except ValueError as ve:
            print(f"   ‚ùå Error de precio: {ve}\n")

# Ejecutar todos los casos
probar_casos()